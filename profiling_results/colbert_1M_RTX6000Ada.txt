1000000


[Feb 15, 16:46:34] #> Note: Output directory /home/ColBERT/experiments/notebook/indexes/Genomics.2bits already exists


[Feb 15, 16:46:34] #> Will delete 86 files already at /home/ColBERT/experiments/notebook/indexes/Genomics.2bits in 20 seconds...
#> Starting...
nranks = 1 	 num_gpus = 1 	 device=0
{
    "query_token_id": "[unused0]",
    "doc_token_id": "[unused1]",
    "query_token": "[Q]",
    "doc_token": "[D]",
    "ncells": null,
    "centroid_score_threshold": null,
    "ndocs": null,
    "load_index_with_mmap": false,
    "index_path": null,
    "index_bsize": 64,
    "nbits": 2,
    "kmeans_niters": 4,
    "resume": false,
    "pool_factor": 1,
    "clustering_mode": "hierarchical",
    "protected_tokens": 0,
    "similarity": "cosine",
    "bsize": 64,
    "accumsteps": 1,
    "lr": 1e-5,
    "maxsteps": 15626,
    "save_every": null,
    "warmup": 781,
    "warmup_bert": null,
    "relu": false,
    "nway": 32,
    "use_ib_negatives": false,
    "reranker": false,
    "distillation_alpha": 1.0,
    "ignore_scores": false,
    "model_name": "answerdotai\/AnswerAI-ColBERTv2.5-small",
    "query_maxlen": 32,
    "attend_to_mask_tokens": false,
    "interaction": "colbert",
    "dim": 96,
    "doc_maxlen": 256,
    "mask_punctuation": true,
    "checkpoint": "answerdotai\/answerai-colbert-small-v1",
    "triples": "\/home\/bclavie\/colbertv2.5_en\/data\/msmarco\/triplets.jsonl",
    "collection": [
        "list with 1000000 elements starting with...",
        [
            "Deconstructing a Disease: RAR, Its Fusion Partners, and Their\r\nRoles  in the Pathogenesis of Acute Promyelocytic Leukemia\r\n",
            "By\r\nAri Melnick and\r\nJonathan D. Licht\r\n",
            "From the Derald H.\u00a0Ruttenberg Cancer Center and Department of\r\nMedicine, Mount Sinai School of Medicine, New York, NY.\r\n"
        ]
    ],
    "queries": "\/home\/bclavie\/colbertv2.5_en\/data\/msmarco\/queries.tsv",
    "index_name": "Genomics.2bits",
    "overwrite": false,
    "root": "\/home\/ColBERT\/experiments",
    "experiment": "notebook",
    "index_root": null,
    "name": "2025-02\/15\/16.46.22",
    "rank": 0,
    "nranks": 1,
    "amp": true,
    "gpus": 1,
    "avoid_fork_if_possible": false
}
[Feb 15, 16:48:12] [0] 		 # of sampled PIDs = 175272 	 sampled_pids[:3] = [436857, 768276, 10663]
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   102   1303.0 MiB   1303.0 MiB           1           @profile
   103                                                 def _sample_pids_profiled():
   104   1348.3 MiB     45.3 MiB           1               return self._sample_pids()


[Feb 15, 16:49:00] [0] 		 #> Encoding 175272 passages..
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146   1348.3 MiB   1348.3 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   4772.6 MiB   3424.3 MiB           1               return self.encoder.encode_passages(*args, **kwargs)


[Feb 15, 16:52:21] [0] 		 avg_doclen_est = 85.43780517578125 	 len(local_sample) = 175,272
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   144   1348.3 MiB   1348.3 MiB           1       @profile
   145                                             def _sample_embeddings(self, sampled_pids):
   146   1348.3 MiB      0.0 MiB           2           @profile
   147   1348.3 MiB      0.0 MiB           1           def _encode_passages_profiled(*args, **kwargs):
   148   4772.6 MiB   3424.3 MiB           1               return self.encoder.encode_passages(*args, **kwargs)
   149                                                     
   150   1348.3 MiB      0.0 MiB           1           local_pids = self.collection.enumerate(rank=self.rank)
   151   1348.3 MiB      0.0 MiB     1000003           local_sample = [passage for pid, passage in local_pids if pid in sampled_pids]
   152                                         
   153   4772.6 MiB      0.0 MiB           1           local_sample_embs, doclens = _encode_passages_profiled(local_sample)
   154                                         
   155   4772.6 MiB      0.0 MiB           1           if torch.cuda.is_available():
   156   4772.6 MiB      0.0 MiB           1               if torch.distributed.is_available() and torch.distributed.is_initialized():
   157   4772.6 MiB      0.0 MiB           1                   self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cuda()
   158   4863.4 MiB     90.8 MiB           1                   torch.distributed.all_reduce(self.num_sample_embs)
   159                                         
   160   4863.4 MiB      0.0 MiB           1                   avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   161   4863.4 MiB      0.0 MiB           1                   avg_doclen_est = torch.tensor([avg_doclen_est]).cuda()
   162   4863.4 MiB      0.0 MiB           1                   torch.distributed.all_reduce(avg_doclen_est)
   163                                         
   164   4863.4 MiB      0.0 MiB           1                   nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cuda()
   165   4863.4 MiB      0.0 MiB           1                   torch.distributed.all_reduce(nonzero_ranks)
   166                                                     else:
   167                                                         self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cuda()
   168                                         
   169                                                         avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   170                                                         avg_doclen_est = torch.tensor([avg_doclen_est]).cuda()
   171                                         
   172                                                         nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cuda()
   173                                                 else:
   174                                                     if torch.distributed.is_available() and torch.distributed.is_initialized():
   175                                                         self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cpu()
   176                                                         torch.distributed.all_reduce(self.num_sample_embs)
   177                                         
   178                                                         avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   179                                                         avg_doclen_est = torch.tensor([avg_doclen_est]).cpu()
   180                                                         torch.distributed.all_reduce(avg_doclen_est)
   181                                         
   182                                                         nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cpu()
   183                                                         torch.distributed.all_reduce(nonzero_ranks)
   184                                                     else:
   185                                                         self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cpu()
   186                                         
   187                                                         avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   188                                                         avg_doclen_est = torch.tensor([avg_doclen_est]).cpu()
   189                                         
   190                                                         nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cpu()
   191                                         
   192   4863.4 MiB      0.0 MiB           1           avg_doclen_est = avg_doclen_est.item() / nonzero_ranks.item()
   193   4863.4 MiB      0.0 MiB           1           self.avg_doclen_est = avg_doclen_est
   194                                         
   195   4863.4 MiB      0.0 MiB           1           Run().print(f'avg_doclen_est = {avg_doclen_est} \t len(local_sample) = {len(local_sample):,}')
   196                                         
   197   4863.4 MiB      0.0 MiB           1           torch.save(local_sample_embs.half(), os.path.join(self.config.index_path_, f'sample.{self.rank}.pt'))
   198                                         
   199   4863.4 MiB      0.0 MiB           1           return avg_doclen_est


Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106   1348.3 MiB   1348.3 MiB           1           @profile
   107                                                 def _sample_embeddings_profiled(pids):
   108   2121.9 MiB    773.6 MiB           1               return self._sample_embeddings(pids)


[Feb 15, 16:52:23] [0] 		 Creating 131,072 partitions.
[Feb 15, 16:52:23] [0] 		 *Estimated* 85,437,805 embeddings.
[Feb 15, 16:52:23] [0] 		 #> Saving the indexing plan to /home/ColBERT/experiments/notebook/indexes/Genomics.2bits/plan.json ..
Clustering 14924855 points in 96D to 131072 clusters, redo 1 times, 4 iterations
  Preprocessing in 0.46 s
  Iteration 0 (29.49 s, search 28.03 s): objective=617172 imbalance=6.704 nsplit=1132         Iteration 1 (60.38 s, search 58.69 s): objective=408055 imbalance=6.190 nsplit=43         Iteration 2 (91.89 s, search 90.00 s): objective=376882 imbalance=6.107 nsplit=9         Iteration 3 (125.43 s, search 121.91 s): objective=364552 imbalance=6.074 nsplit=1       Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    82   1303.0 MiB   1303.0 MiB           1       @profile
    83                                             def setup(self):
    84                                                 '''
    85                                                 Calculates and saves plan.json for the whole collection.
    86                                                 
    87                                                 plan.json { config, num_chunks, num_partitions, num_embeddings_est, avg_doclen_est}
    88                                                 num_partitions is the number of centroids to be generated.
    89                                                 '''
    90   1303.0 MiB      0.0 MiB           1           if self.config.resume:
    91                                                     if self._try_load_plan():
    92                                                         if self.verbose > 1:
    93                                                             Run().print_main(f"#> Loaded plan from {self.plan_path}:")
    94                                                             Run().print_main(f"#> num_chunks = {self.num_chunks}")
    95                                                             Run().print_main(f"#> num_partitions = {self.num_chunks}")
    96                                                             Run().print_main(f"#> num_embeddings_est = {self.num_embeddings_est}")
    97                                                             Run().print_main(f"#> avg_doclen_est = {self.avg_doclen_est}")
    98                                                         return
    99                                         
   100   1303.0 MiB      0.0 MiB           1           self.num_chunks = int(np.ceil(len(self.collection) / self.collection.get_chunksize()))
   101                                                 
   102   1303.0 MiB      0.0 MiB           2           @profile
   103   1303.0 MiB      0.0 MiB           1           def _sample_pids_profiled():
   104   1348.3 MiB     45.3 MiB           1               return self._sample_pids()
   105                                             
   106   1348.3 MiB      0.0 MiB           2           @profile
   107   1303.0 MiB      0.0 MiB           1           def _sample_embeddings_profiled(pids):
   108   2121.9 MiB    773.6 MiB           1               return self._sample_embeddings(pids)
   109                                                     
   110                                                 # Saves sampled passages and embeddings for training k-means centroids later 
   111   1348.3 MiB      0.0 MiB           1           sampled_pids = _sample_pids_profiled()
   112   2121.9 MiB      0.0 MiB           1           avg_doclen_est = _sample_embeddings_profiled(sampled_pids)
   113                                         
   114                                                 # Select the number of partitions
   115   2121.9 MiB      0.0 MiB           1           num_passages = len(self.collection)
   116   2121.9 MiB      0.0 MiB           1           self.num_embeddings_est = num_passages * avg_doclen_est
   117   2121.9 MiB      0.0 MiB           1           self.num_partitions = int(2 ** np.floor(np.log2(16 * np.sqrt(self.num_embeddings_est))))
   118                                         
   119   2121.9 MiB      0.0 MiB           1           if self.verbose > 0:
   120   2121.9 MiB      0.0 MiB           1               Run().print_main(f'Creating {self.num_partitions:,} partitions.')
   121   2121.9 MiB      0.0 MiB           1               Run().print_main(f'*Estimated* {int(self.num_embeddings_est):,} embeddings.')
   122                                         
   123   2127.1 MiB      5.2 MiB           1           self._save_plan()


[Feb 15, 16:55:01] Loading decompress_residuals_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[Feb 15, 16:55:02] Loading packbits_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[0.012, 0.012, 0.011, 0.012, 0.011, 0.012, 0.012, 0.012, 0.013, 0.011, 0.012, 0.013, 0.013, 0.012, 0.012, 0.014, 0.01, 0.013, 0.012, 0.012, 0.011, 0.012, 0.013, 0.012, 0.012, 0.013, 0.012, 0.012, 0.012, 0.012, 0.012, 0.011, 0.012, 0.012, 0.012, 0.013, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.013, 0.011, 0.011, 0.013, 0.013, 0.013, 0.012, 0.013, 0.013, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.012, 0.013, 0.013, 0.012, 0.013, 0.013, 0.013, 0.012, 0.012, 0.012, 0.013, 0.011, 0.011, 0.012, 0.012, 0.012, 0.011, 0.011, 0.012, 0.013, 0.012, 0.012, 0.013, 0.012, 0.012, 0.012, 0.011, 0.013, 0.012, 0.012, 0.012, 0.012, 0.012, 0.013, 0.012, 0.012]
[Feb 15, 16:55:03] #> Got bucket_cutoffs_quantiles = tensor([0.2500, 0.5000, 0.7500], device='cuda:0') and bucket_weights_quantiles = tensor([0.1250, 0.3750, 0.6250, 0.8750], device='cuda:0')
[Feb 15, 16:55:03] #> Got bucket_cutoffs = tensor([-9.4604e-03,  3.8147e-06,  9.6436e-03], device='cuda:0') and bucket_weights = tensor([-0.0170, -0.0042,  0.0044,  0.0172], device='cuda:0')
[Feb 15, 16:55:03] avg_residual = 0.01209259033203125
[Feb 15, 16:55:04] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:55:20] [0] 		 #> Saving chunk 0: 	 25,000 passages and 1,897,577 embeddings. From #0 onward.
[Feb 15, 16:55:22] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:55:38] [0] 		 #> Saving chunk 1: 	 25,000 passages and 1,877,590 embeddings. From #25,000 onward.
[Feb 15, 16:55:39] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:55:55] [0] 		 #> Saving chunk 2: 	 25,000 passages and 1,953,069 embeddings. From #50,000 onward.
[Feb 15, 16:55:57] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:56:14] [0] 		 #> Saving chunk 3: 	 25,000 passages and 2,028,875 embeddings. From #75,000 onward.
[Feb 15, 16:56:15] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:56:31] [0] 		 #> Saving chunk 4: 	 25,000 passages and 1,962,099 embeddings. From #100,000 onward.
[Feb 15, 16:56:33] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:56:49] [0] 		 #> Saving chunk 5: 	 25,000 passages and 2,017,239 embeddings. From #125,000 onward.
[Feb 15, 16:56:51] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:57:07] [0] 		 #> Saving chunk 6: 	 25,000 passages and 2,015,742 embeddings. From #150,000 onward.
[Feb 15, 16:57:08] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:57:24] [0] 		 #> Saving chunk 7: 	 25,000 passages and 1,989,287 embeddings. From #175,000 onward.
[Feb 15, 16:57:26] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:57:42] [0] 		 #> Saving chunk 8: 	 25,000 passages and 2,092,270 embeddings. From #200,000 onward.
[Feb 15, 16:57:44] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:58:00] [0] 		 #> Saving chunk 9: 	 25,000 passages and 2,127,784 embeddings. From #225,000 onward.
[Feb 15, 16:58:01] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:58:17] [0] 		 #> Saving chunk 10: 	 25,000 passages and 2,065,709 embeddings. From #250,000 onward.
[Feb 15, 16:58:19] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:58:35] [0] 		 #> Saving chunk 11: 	 25,000 passages and 2,133,460 embeddings. From #275,000 onward.
[Feb 15, 16:58:36] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:58:53] [0] 		 #> Saving chunk 12: 	 25,000 passages and 2,091,715 embeddings. From #300,000 onward.
[Feb 15, 16:58:54] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:59:10] [0] 		 #> Saving chunk 13: 	 25,000 passages and 2,178,334 embeddings. From #325,000 onward.
[Feb 15, 16:59:12] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:59:28] [0] 		 #> Saving chunk 14: 	 25,000 passages and 2,095,639 embeddings. From #350,000 onward.
[Feb 15, 16:59:29] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:59:45] [0] 		 #> Saving chunk 15: 	 25,000 passages and 2,110,115 embeddings. From #375,000 onward.
[Feb 15, 16:59:47] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:00:03] [0] 		 #> Saving chunk 16: 	 25,000 passages and 2,163,097 embeddings. From #400,000 onward.
[Feb 15, 17:00:04] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:00:21] [0] 		 #> Saving chunk 17: 	 25,000 passages and 2,163,011 embeddings. From #425,000 onward.
[Feb 15, 17:00:22] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:00:38] [0] 		 #> Saving chunk 18: 	 25,000 passages and 2,193,365 embeddings. From #450,000 onward.
[Feb 15, 17:00:40] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:00:56] [0] 		 #> Saving chunk 19: 	 25,000 passages and 2,146,291 embeddings. From #475,000 onward.
[Feb 15, 17:00:57] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:01:13] [0] 		 #> Saving chunk 20: 	 25,000 passages and 2,148,289 embeddings. From #500,000 onward.
[Feb 15, 17:01:14] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:01:31] [0] 		 #> Saving chunk 21: 	 25,000 passages and 2,169,782 embeddings. From #525,000 onward.
[Feb 15, 17:01:32] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:01:48] [0] 		 #> Saving chunk 22: 	 25,000 passages and 2,196,228 embeddings. From #550,000 onward.
[Feb 15, 17:01:50] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:02:07] [0] 		 #> Saving chunk 23: 	 25,000 passages and 2,180,247 embeddings. From #575,000 onward.
[Feb 15, 17:02:08] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:02:24] [0] 		 #> Saving chunk 24: 	 25,000 passages and 2,263,261 embeddings. From #600,000 onward.
[Feb 15, 17:02:26] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:02:42] [0] 		 #> Saving chunk 25: 	 25,000 passages and 2,041,369 embeddings. From #625,000 onward.
[Feb 15, 17:02:43] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:02:59] [0] 		 #> Saving chunk 26: 	 25,000 passages and 2,173,092 embeddings. From #650,000 onward.
[Feb 15, 17:03:01] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:03:18] [0] 		 #> Saving chunk 27: 	 25,000 passages and 2,191,100 embeddings. From #675,000 onward.
[Feb 15, 17:03:19] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:03:35] [0] 		 #> Saving chunk 28: 	 25,000 passages and 2,252,093 embeddings. From #700,000 onward.
[Feb 15, 17:03:37] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:03:53] [0] 		 #> Saving chunk 29: 	 25,000 passages and 2,143,917 embeddings. From #725,000 onward.
[Feb 15, 17:03:54] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:04:11] [0] 		 #> Saving chunk 30: 	 25,000 passages and 2,248,400 embeddings. From #750,000 onward.
[Feb 15, 17:04:12] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:04:28] [0] 		 #> Saving chunk 31: 	 25,000 passages and 2,180,884 embeddings. From #775,000 onward.
[Feb 15, 17:04:30] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:04:46] [0] 		 #> Saving chunk 32: 	 25,000 passages and 2,225,688 embeddings. From #800,000 onward.
[Feb 15, 17:04:47] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:05:03] [0] 		 #> Saving chunk 33: 	 25,000 passages and 2,255,695 embeddings. From #825,000 onward.
[Feb 15, 17:05:05] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:05:21] [0] 		 #> Saving chunk 34: 	 25,000 passages and 2,314,447 embeddings. From #850,000 onward.
[Feb 15, 17:05:23] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:05:39] [0] 		 #> Saving chunk 35: 	 25,000 passages and 2,188,810 embeddings. From #875,000 onward.
[Feb 15, 17:05:40] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:05:56] [0] 		 #> Saving chunk 36: 	 25,000 passages and 2,246,470 embeddings. From #900,000 onward.
[Feb 15, 17:05:58] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:06:14] [0] 		 #> Saving chunk 37: 	 25,000 passages and 2,226,571 embeddings. From #925,000 onward.
[Feb 15, 17:06:16] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:06:32] [0] 		 #> Saving chunk 38: 	 25,000 passages and 2,278,898 embeddings. From #950,000 onward.
[Feb 15, 17:06:33] [0] 		 #> Encoding 25000 passages..
[Feb 15, 17:06:49] [0] 		 #> Saving chunk 39: 	 25,000 passages and 2,328,273 embeddings. From #975,000 onward.
[Feb 15, 17:06:51] [0] 		 #> Checking all files were saved...
[Feb 15, 17:06:51] [0] 		 Found all files!
[Feb 15, 17:06:51] [0] 		 #> Building IVF...
[Feb 15, 17:06:51] [0] 		 #> Loading codes...
[Feb 15, 17:06:52] [0] 		 Sorting codes...
[Feb 15, 17:06:53] [0] 		 Getting unique codes...
[Feb 15, 17:06:53] #> Optimizing IVF to store map from centroids to list of pids..
[Feb 15, 17:06:53] #> Building the emb2pid mapping..
[Feb 15, 17:07:00] len(emb2pid) = 85555782
[Feb 15, 17:07:07] #> Saved optimized IVF to /home/ColBERT/experiments/notebook/indexes/Genomics.2bits/ivf.pid.pt
[Feb 15, 17:07:07] [0] 		 #> Saving the indexing metadata to /home/ColBERT/experiments/notebook/indexes/Genomics.2bits/metadata.json ..
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    62   1303.0 MiB   1303.0 MiB           1       @profile
    63                                             def run(self, shared_lists):
    64   1303.0 MiB      0.0 MiB           1           with torch.inference_mode():
    65   2104.3 MiB    801.3 MiB           1               self.setup() # Computes and saves plan for whole collection
    66   2104.3 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    67   2104.3 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')
    68                                         
    69   2104.3 MiB      0.0 MiB           1               if not self.config.resume or not self.saver.try_load_codec():
    70   2192.4 MiB     88.1 MiB           1                   self.train(shared_lists) # Trains centroids from selected passages
    71   2192.4 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    72   2192.4 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')
    73                                         
    74   2704.3 MiB    511.9 MiB           1               self.index() # Encodes and saves all tokens into residuals
    75   2704.3 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    76   2704.3 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')
    77                                         
    78   2974.6 MiB    270.2 MiB           1               self.finalize() # Builds metadata and centroid to passage mapping
    79   2974.6 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    80   2974.6 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')


Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31   1174.9 MiB   1174.9 MiB           1   @profile
    32                                         def encode(config, collection, shared_lists, shared_queues, verbose: int = 3):
    33   1303.0 MiB    128.1 MiB           1       encoder = CollectionIndexer(config=config, collection=collection, verbose=verbose)
    34   2974.6 MiB   1671.6 MiB           1       encoder.run(shared_lists)



#> Joined...
Filename: /home/ColBERT/colbert/infra/launcher.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    28   2693.9 MiB   2693.9 MiB           1       @profile
    29                                             def launch(self, custom_config, *args):
    30   2693.9 MiB      0.0 MiB           1           assert isinstance(custom_config, BaseConfig)
    31   2693.9 MiB      0.0 MiB           1           assert isinstance(custom_config, RunSettings)
    32                                                 
    33   2693.9 MiB      0.0 MiB           1           return_value_queue = mp.Queue()
    34   2693.9 MiB      0.0 MiB           1           rng = random.Random(time.time())
    35   2693.9 MiB      0.0 MiB           1           port = str(12355 + rng.randint(0, 1000))  # randomize the port to avoid collision on launching several jobs.
    36   2693.9 MiB      0.0 MiB           1           all_procs = []
    37   2699.1 MiB      0.0 MiB           2           for new_rank in range(0, self.nranks):
    38   2699.1 MiB      5.2 MiB           1               new_config = type(custom_config).from_existing(custom_config, self.run_config, RunConfig(rank=new_rank))
    39                                         
    40   2699.1 MiB      0.0 MiB           1               args_ = (self.callee, port, return_value_queue, new_config, *args)
    41   2699.1 MiB      0.0 MiB           1               all_procs.append(mp.Process(target=setup_new_process, args=args_))
    42                                         
    43                                                 # Clear GPU space (e.g., after a `Searcher` on GPU-0 is deleted)
    44                                                 # TODO: Generalize this from GPU-0 only!
    45                                                 # TODO: Move this to a function. And call that function from __del__ in a class that's inherited by Searcher, Indexer, etc.
    46                                         
    47                                                 # t = torch.cuda.get_device_properties(0).total_memory
    48                                                 # r = torch.cuda.memory_reserved(0)
    49                                                 # a = torch.cuda.memory_allocated(0)
    50                                                 # f = r-a
    51                                         
    52                                                 # print_message(f"[Pre-Emptying] GPU memory check: r={r}, a={a}, f={f}")
    53                                         
    54   2699.1 MiB      0.0 MiB           1           torch.cuda.empty_cache()
    55                                         
    56                                                 # t = torch.cuda.get_device_properties(0).total_memory
    57                                                 # r = torch.cuda.memory_reserved(0)
    58                                                 # a = torch.cuda.memory_allocated(0)
    59                                                 # f = r-a
    60                                         
    61                                                 # print_message(f"[Post-Emptying] GPU memory check: r={r}, a={a}, f={f}")
    62                                         
    63   2699.1 MiB      0.0 MiB           1           print_memory_stats('MAIN')
    64                                         
    65   3114.2 MiB      0.0 MiB           2           for proc in all_procs:
    66   2699.1 MiB      0.0 MiB           1               print("#> Starting...")
    67   3114.2 MiB    415.1 MiB           1               proc.start()
    68                                         
    69   3114.2 MiB      0.0 MiB           1           print_memory_stats('MAIN')
    70                                         
    71                                                 # TODO: If the processes crash upon join, raise an exception and don't block on .get() below!
    72                                         
    73   3114.2 MiB      0.0 MiB           4           return_values = sorted([return_value_queue.get() for _ in all_procs])
    74   3114.2 MiB      0.0 MiB           4           return_values = [val for rank, val in return_values]
    75                                         
    76   3114.2 MiB      0.0 MiB           1           if not self.return_all:
    77   3114.2 MiB      0.0 MiB           1               return_values = return_values[0]
    78                                                 
    79   3114.2 MiB      0.0 MiB           2           for proc in all_procs:
    80   3114.2 MiB      0.0 MiB           1               proc.join()
    81   3114.2 MiB      0.0 MiB           1               print("#> Joined...")
    82                                         
    83   3114.2 MiB      0.0 MiB           1           print_memory_stats('MAIN')
    84                                                 
    85   3114.2 MiB      0.0 MiB           1           return return_values


Filename: /home/ColBERT/colbert/indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    85   2693.9 MiB   2693.9 MiB           1       @profile
    86                                             def __launch(self, collection):
    87   2693.9 MiB      0.0 MiB           1           launcher = Launcher(encode)
    88   2693.9 MiB      0.0 MiB           1           if self.config.nranks == 1 and self.config.avoid_fork_if_possible:
    89                                                     shared_queues = []
    90                                                     shared_lists = []
    91                                                     launcher.launch_without_fork(self.config, collection, shared_lists, shared_queues, self.verbose)
    92                                         
    93                                                     return
    94                                         
    95   2693.9 MiB      0.0 MiB           1           manager = mp.Manager()
    96   2693.9 MiB      0.0 MiB           4           shared_lists = [manager.list() for _ in range(self.config.nranks)]
    97   2693.9 MiB      0.0 MiB           4           shared_queues = [manager.Queue(maxsize=1) for _ in range(self.config.nranks)]
    98                                         
    99                                                 # Encodes collection into index using the CollectionIndexer class
   100   3114.2 MiB    420.3 MiB           1           launcher.launch(self.config, collection, shared_lists, shared_queues, self.verbose)


Filename: /home/ColBERT/colbert/indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    60   2693.9 MiB   2693.9 MiB           1       @profile
    61                                             def index(self, name, collection, overwrite=False):
    62   2693.9 MiB      0.0 MiB           1           assert overwrite in [True, False, 'reuse', 'resume', "force_silent_overwrite"]
    63                                         
    64   2693.9 MiB      0.0 MiB           1           self.configure(collection=collection, index_name=name, resume=overwrite=='resume')
    65                                                 # Note: The bsize value set here is ignored internally. Users are encouraged
    66                                                 # to supply their own batch size for indexing by using the index_bsize parameter in the ColBERTConfig.
    67   2693.9 MiB      0.0 MiB           1           self.configure(bsize=64, partitions=None)
    68                                         
    69   2693.9 MiB      0.0 MiB           1           self.index_path = self.config.index_path_
    70   2693.9 MiB      0.0 MiB           1           index_does_not_exist = (not os.path.exists(self.config.index_path_))
    71                                         
    72   2693.9 MiB      0.0 MiB           1           assert (overwrite in [True, 'reuse', 'resume', "force_silent_overwrite"]) or index_does_not_exist, self.config.index_path_
    73   2693.9 MiB      0.0 MiB           1           create_directory(self.config.index_path_)
    74                                         
    75   2693.9 MiB      0.0 MiB           1           if overwrite == 'force_silent_overwrite':
    76                                                     self.erase(force_silent=True)
    77   2693.9 MiB      0.0 MiB           1           elif overwrite is True:
    78   2693.9 MiB      0.0 MiB           1               self.erase()
    79                                         
    80   2693.9 MiB      0.0 MiB           1           if index_does_not_exist or overwrite != 'reuse':
    81   3114.2 MiB    420.3 MiB           1               self.__launch(collection)
    82                                         
    83   3114.2 MiB      0.0 MiB           1           return self.index_path


