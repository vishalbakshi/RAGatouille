250000


[Feb 15, 16:29:00] #> Note: Output directory /home/ColBERT/experiments/notebook/indexes/Genomics.2bits already exists


[Feb 15, 16:29:00] #> Will delete 22 files already at /home/ColBERT/experiments/notebook/indexes/Genomics.2bits in 20 seconds...
#> Starting...
nranks = 1 	 num_gpus = 1 	 device=0
{
    "query_token_id": "[unused0]",
    "doc_token_id": "[unused1]",
    "query_token": "[Q]",
    "doc_token": "[D]",
    "ncells": null,
    "centroid_score_threshold": null,
    "ndocs": null,
    "load_index_with_mmap": false,
    "index_path": null,
    "index_bsize": 64,
    "nbits": 2,
    "kmeans_niters": 4,
    "resume": false,
    "pool_factor": 1,
    "clustering_mode": "hierarchical",
    "protected_tokens": 0,
    "similarity": "cosine",
    "bsize": 64,
    "accumsteps": 1,
    "lr": 1e-5,
    "maxsteps": 15626,
    "save_every": null,
    "warmup": 781,
    "warmup_bert": null,
    "relu": false,
    "nway": 32,
    "use_ib_negatives": false,
    "reranker": false,
    "distillation_alpha": 1.0,
    "ignore_scores": false,
    "model_name": "answerdotai\/AnswerAI-ColBERTv2.5-small",
    "query_maxlen": 32,
    "attend_to_mask_tokens": false,
    "interaction": "colbert",
    "dim": 96,
    "doc_maxlen": 256,
    "mask_punctuation": true,
    "checkpoint": "answerdotai\/answerai-colbert-small-v1",
    "triples": "\/home\/bclavie\/colbertv2.5_en\/data\/msmarco\/triplets.jsonl",
    "collection": [
        "list with 250000 elements starting with...",
        [
            "Deconstructing a Disease: RAR, Its Fusion Partners, and Their\r\nRoles  in the Pathogenesis of Acute Promyelocytic Leukemia\r\n",
            "By\r\nAri Melnick and\r\nJonathan D. Licht\r\n",
            "From the Derald H.\u00a0Ruttenberg Cancer Center and Department of\r\nMedicine, Mount Sinai School of Medicine, New York, NY.\r\n"
        ]
    ],
    "queries": "\/home\/bclavie\/colbertv2.5_en\/data\/msmarco\/queries.tsv",
    "index_name": "Genomics.2bits",
    "overwrite": false,
    "root": "\/home\/ColBERT\/experiments",
    "experiment": "notebook",
    "index_root": null,
    "name": "2025-02\/15\/16.28.50",
    "rank": 0,
    "nranks": 1,
    "amp": true,
    "gpus": 1,
    "avoid_fork_if_possible": false
}
[Feb 15, 16:29:44] [0] 		 # of sampled PIDs = 87636 	 sampled_pids[:3] = [109214, 192069, 2665]
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   102    812.6 MiB    812.6 MiB           1           @profile
   103                                                 def _sample_pids_profiled():
   104    826.5 MiB     13.9 MiB           1               return self._sample_pids()


[Feb 15, 16:29:56] [0] 		 #> Encoding 87636 passages..
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146    826.5 MiB    826.5 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   2792.6 MiB   1966.1 MiB           1               return self.encoder.encode_passages(*args, **kwargs)


[Feb 15, 16:31:36] [0] 		 avg_doclen_est = 79.57461547851562 	 len(local_sample) = 87,636
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   144    826.5 MiB    826.5 MiB           1       @profile
   145                                             def _sample_embeddings(self, sampled_pids):
   146    826.5 MiB      0.0 MiB           2           @profile
   147    826.5 MiB      0.0 MiB           1           def _encode_passages_profiled(*args, **kwargs):
   148   2792.6 MiB   1966.1 MiB           1               return self.encoder.encode_passages(*args, **kwargs)
   149                                                     
   150    826.5 MiB      0.0 MiB           1           local_pids = self.collection.enumerate(rank=self.rank)
   151    826.5 MiB      0.0 MiB      250003           local_sample = [passage for pid, passage in local_pids if pid in sampled_pids]
   152                                         
   153   2792.6 MiB      0.0 MiB           1           local_sample_embs, doclens = _encode_passages_profiled(local_sample)
   154                                         
   155   2792.6 MiB      0.0 MiB           1           if torch.cuda.is_available():
   156   2792.6 MiB      0.0 MiB           1               if torch.distributed.is_available() and torch.distributed.is_initialized():
   157   2792.6 MiB      0.0 MiB           1                   self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cuda()
   158   2885.6 MiB     92.9 MiB           1                   torch.distributed.all_reduce(self.num_sample_embs)
   159                                         
   160   2885.6 MiB      0.0 MiB           1                   avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   161   2885.6 MiB      0.0 MiB           1                   avg_doclen_est = torch.tensor([avg_doclen_est]).cuda()
   162   2885.6 MiB      0.0 MiB           1                   torch.distributed.all_reduce(avg_doclen_est)
   163                                         
   164   2885.6 MiB      0.0 MiB           1                   nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cuda()
   165   2885.6 MiB      0.0 MiB           1                   torch.distributed.all_reduce(nonzero_ranks)
   166                                                     else:
   167                                                         self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cuda()
   168                                         
   169                                                         avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   170                                                         avg_doclen_est = torch.tensor([avg_doclen_est]).cuda()
   171                                         
   172                                                         nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cuda()
   173                                                 else:
   174                                                     if torch.distributed.is_available() and torch.distributed.is_initialized():
   175                                                         self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cpu()
   176                                                         torch.distributed.all_reduce(self.num_sample_embs)
   177                                         
   178                                                         avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   179                                                         avg_doclen_est = torch.tensor([avg_doclen_est]).cpu()
   180                                                         torch.distributed.all_reduce(avg_doclen_est)
   181                                         
   182                                                         nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cpu()
   183                                                         torch.distributed.all_reduce(nonzero_ranks)
   184                                                     else:
   185                                                         self.num_sample_embs = torch.tensor([local_sample_embs.size(0)]).cpu()
   186                                         
   187                                                         avg_doclen_est = sum(doclens) / len(doclens) if doclens else 0
   188                                                         avg_doclen_est = torch.tensor([avg_doclen_est]).cpu()
   189                                         
   190                                                         nonzero_ranks = torch.tensor([float(len(local_sample) > 0)]).cpu()
   191                                         
   192   2885.6 MiB      0.0 MiB           1           avg_doclen_est = avg_doclen_est.item() / nonzero_ranks.item()
   193   2885.6 MiB      0.0 MiB           1           self.avg_doclen_est = avg_doclen_est
   194                                         
   195   2885.6 MiB      0.0 MiB           1           Run().print(f'avg_doclen_est = {avg_doclen_est} \t len(local_sample) = {len(local_sample):,}')
   196                                         
   197   2885.6 MiB      0.0 MiB           1           torch.save(local_sample_embs.half(), os.path.join(self.config.index_path_, f'sample.{self.rank}.pt'))
   198                                         
   199   2885.6 MiB      0.0 MiB           1           return avg_doclen_est


Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   106    826.5 MiB    826.5 MiB           1           @profile
   107                                                 def _sample_embeddings_profiled(pids):
   108   1608.7 MiB    782.1 MiB           1               return self._sample_embeddings(pids)


[Feb 15, 16:31:37] [0] 		 Creating 65,536 partitions.
[Feb 15, 16:31:37] [0] 		 *Estimated* 19,893,653 embeddings.
[Feb 15, 16:31:37] [0] 		 #> Saving the indexing plan to /home/ColBERT/experiments/notebook/indexes/Genomics.2bits/plan.json ..
Clustering 6923601 points in 96D to 65536 clusters, redo 1 times, 4 iterations
  Preprocessing in 0.21 s
  Iteration 0 (6.66 s, search 6.40 s): objective=342792 imbalance=3.333 nsplit=554         Iteration 1 (13.41 s, search 13.07 s): objective=222013 imbalance=2.933 nsplit=18         Iteration 2 (20.37 s, search 19.81 s): objective=203231 imbalance=3.873 nsplit=10         Iteration 3 (27.36 s, search 26.65 s): objective=195560 imbalance=3.844 nsplit=0       Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    82    812.6 MiB    812.6 MiB           1       @profile
    83                                             def setup(self):
    84                                                 '''
    85                                                 Calculates and saves plan.json for the whole collection.
    86                                                 
    87                                                 plan.json { config, num_chunks, num_partitions, num_embeddings_est, avg_doclen_est}
    88                                                 num_partitions is the number of centroids to be generated.
    89                                                 '''
    90    812.6 MiB      0.0 MiB           1           if self.config.resume:
    91                                                     if self._try_load_plan():
    92                                                         if self.verbose > 1:
    93                                                             Run().print_main(f"#> Loaded plan from {self.plan_path}:")
    94                                                             Run().print_main(f"#> num_chunks = {self.num_chunks}")
    95                                                             Run().print_main(f"#> num_partitions = {self.num_chunks}")
    96                                                             Run().print_main(f"#> num_embeddings_est = {self.num_embeddings_est}")
    97                                                             Run().print_main(f"#> avg_doclen_est = {self.avg_doclen_est}")
    98                                                         return
    99                                         
   100    812.6 MiB      0.0 MiB           1           self.num_chunks = int(np.ceil(len(self.collection) / self.collection.get_chunksize()))
   101                                                 
   102    812.6 MiB      0.0 MiB           2           @profile
   103    812.6 MiB      0.0 MiB           1           def _sample_pids_profiled():
   104    826.5 MiB     13.9 MiB           1               return self._sample_pids()
   105                                             
   106    826.5 MiB      0.0 MiB           2           @profile
   107    812.6 MiB      0.0 MiB           1           def _sample_embeddings_profiled(pids):
   108   1608.7 MiB    782.1 MiB           1               return self._sample_embeddings(pids)
   109                                                     
   110                                                 # Saves sampled passages and embeddings for training k-means centroids later 
   111    826.5 MiB      0.0 MiB           1           sampled_pids = _sample_pids_profiled()
   112   1608.7 MiB      0.0 MiB           1           avg_doclen_est = _sample_embeddings_profiled(sampled_pids)
   113                                         
   114                                                 # Select the number of partitions
   115   1608.7 MiB      0.0 MiB           1           num_passages = len(self.collection)
   116   1608.7 MiB      0.0 MiB           1           self.num_embeddings_est = num_passages * avg_doclen_est
   117   1608.7 MiB      0.0 MiB           1           self.num_partitions = int(2 ** np.floor(np.log2(16 * np.sqrt(self.num_embeddings_est))))
   118                                         
   119   1608.7 MiB      0.0 MiB           1           if self.verbose > 0:
   120   1608.7 MiB      0.0 MiB           1               Run().print_main(f'Creating {self.num_partitions:,} partitions.')
   121   1608.7 MiB      0.0 MiB           1               Run().print_main(f'*Estimated* {int(self.num_embeddings_est):,} embeddings.')
   122                                         
   123   1608.7 MiB      0.0 MiB           1           self._save_plan()


[Feb 15, 16:32:14] Loading decompress_residuals_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[Feb 15, 16:32:15] Loading packbits_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...
[0.013, 0.013, 0.012, 0.013, 0.012, 0.013, 0.013, 0.013, 0.014, 0.012, 0.012, 0.014, 0.015, 0.012, 0.013, 0.015, 0.011, 0.014, 0.013, 0.012, 0.012, 0.013, 0.014, 0.012, 0.012, 0.014, 0.013, 0.013, 0.013, 0.013, 0.013, 0.012, 0.013, 0.013, 0.013, 0.014, 0.012, 0.013, 0.013, 0.013, 0.012, 0.013, 0.013, 0.012, 0.012, 0.014, 0.013, 0.014, 0.012, 0.013, 0.014, 0.013, 0.013, 0.013, 0.012, 0.012, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.012, 0.014, 0.014, 0.014, 0.013, 0.013, 0.013, 0.014, 0.012, 0.012, 0.013, 0.013, 0.013, 0.012, 0.012, 0.013, 0.014, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.012, 0.013, 0.013, 0.013, 0.013, 0.013, 0.013, 0.014, 0.013, 0.013]
[Feb 15, 16:32:16] #> Got bucket_cutoffs_quantiles = tensor([0.2500, 0.5000, 0.7500], device='cuda:0') and bucket_weights_quantiles = tensor([0.1250, 0.3750, 0.6250, 0.8750], device='cuda:0')
[Feb 15, 16:32:16] #> Got bucket_cutoffs = tensor([-0.0100,  0.0000,  0.0103], device='cuda:0') and bucket_weights = tensor([-0.0181, -0.0044,  0.0046,  0.0183], device='cuda:0')
[Feb 15, 16:32:16] avg_residual = 0.012939453125
[Feb 15, 16:32:16] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:32:32] [0] 		 #> Saving chunk 0: 	 25,000 passages and 1,897,577 embeddings. From #0 onward.
[Feb 15, 16:32:33] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:32:49] [0] 		 #> Saving chunk 1: 	 25,000 passages and 1,877,590 embeddings. From #25,000 onward.
[Feb 15, 16:32:50] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:33:06] [0] 		 #> Saving chunk 2: 	 25,000 passages and 1,953,069 embeddings. From #50,000 onward.
[Feb 15, 16:33:06] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:33:22] [0] 		 #> Saving chunk 3: 	 25,000 passages and 2,028,875 embeddings. From #75,000 onward.
[Feb 15, 16:33:23] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:33:39] [0] 		 #> Saving chunk 4: 	 25,000 passages and 1,962,099 embeddings. From #100,000 onward.
[Feb 15, 16:33:40] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:33:56] [0] 		 #> Saving chunk 5: 	 25,000 passages and 2,017,239 embeddings. From #125,000 onward.
[Feb 15, 16:33:57] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:34:13] [0] 		 #> Saving chunk 6: 	 25,000 passages and 2,015,742 embeddings. From #150,000 onward.
[Feb 15, 16:34:14] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:34:29] [0] 		 #> Saving chunk 7: 	 25,000 passages and 1,989,287 embeddings. From #175,000 onward.
[Feb 15, 16:34:30] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:34:47] [0] 		 #> Saving chunk 8: 	 25,000 passages and 2,092,270 embeddings. From #200,000 onward.
[Feb 15, 16:34:48] [0] 		 #> Encoding 25000 passages..
[Feb 15, 16:35:04] [0] 		 #> Saving chunk 9: 	 25,000 passages and 2,127,784 embeddings. From #225,000 onward.
[Feb 15, 16:35:05] [0] 		 #> Checking all files were saved...
[Feb 15, 16:35:05] [0] 		 Found all files!
[Feb 15, 16:35:05] [0] 		 #> Building IVF...
[Feb 15, 16:35:05] [0] 		 #> Loading codes...
[Feb 15, 16:35:05] [0] 		 Sorting codes...
[Feb 15, 16:35:05] [0] 		 Getting unique codes...
[Feb 15, 16:35:05] #> Optimizing IVF to store map from centroids to list of pids..
[Feb 15, 16:35:05] #> Building the emb2pid mapping..
[Feb 15, 16:35:07] len(emb2pid) = 19961532
[Feb 15, 16:35:10] #> Saved optimized IVF to /home/ColBERT/experiments/notebook/indexes/Genomics.2bits/ivf.pid.pt
[Feb 15, 16:35:10] [0] 		 #> Saving the indexing metadata to /home/ColBERT/experiments/notebook/indexes/Genomics.2bits/metadata.json ..
Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    62    812.6 MiB    812.6 MiB           1       @profile
    63                                             def run(self, shared_lists):
    64    812.6 MiB      0.0 MiB           1           with torch.inference_mode():
    65   1603.6 MiB    791.0 MiB           1               self.setup() # Computes and saves plan for whole collection
    66   1603.6 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    67   1603.6 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')
    68                                         
    69   1603.6 MiB      0.0 MiB           1               if not self.config.resume or not self.saver.try_load_codec():
    70   1729.9 MiB    126.4 MiB           1                   self.train(shared_lists) # Trains centroids from selected passages
    71   1729.9 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    72   1729.9 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')
    73                                         
    74   1987.7 MiB    257.8 MiB           1               self.index() # Encodes and saves all tokens into residuals
    75   1987.7 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    76   1987.7 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')
    77                                         
    78   1989.2 MiB      1.5 MiB           1               self.finalize() # Builds metadata and centroid to passage mapping
    79   1989.2 MiB      0.0 MiB           1               distributed.barrier(self.rank)
    80   1989.2 MiB      0.0 MiB           1               print_memory_stats(f'RANK:{self.rank}')


Filename: /home/ColBERT/colbert/indexing/collection_indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    31    687.9 MiB    687.9 MiB           1   @profile
    32                                         def encode(config, collection, shared_lists, shared_queues, verbose: int = 3):
    33    812.6 MiB    124.7 MiB           1       encoder = CollectionIndexer(config=config, collection=collection, verbose=verbose)
    34   1989.2 MiB   1176.6 MiB           1       encoder.run(shared_lists)



#> Joined...
Filename: /home/ColBERT/colbert/infra/launcher.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    28   1738.8 MiB   1738.8 MiB           1       @profile
    29                                             def launch(self, custom_config, *args):
    30   1738.8 MiB      0.0 MiB           1           assert isinstance(custom_config, BaseConfig)
    31   1738.8 MiB      0.0 MiB           1           assert isinstance(custom_config, RunSettings)
    32                                                 
    33   1738.8 MiB      0.0 MiB           1           return_value_queue = mp.Queue()
    34   1738.8 MiB      0.0 MiB           1           rng = random.Random(time.time())
    35   1738.8 MiB      0.0 MiB           1           port = str(12355 + rng.randint(0, 1000))  # randomize the port to avoid collision on launching several jobs.
    36   1738.8 MiB      0.0 MiB           1           all_procs = []
    37   1738.8 MiB      0.0 MiB           2           for new_rank in range(0, self.nranks):
    38   1738.8 MiB      0.0 MiB           1               new_config = type(custom_config).from_existing(custom_config, self.run_config, RunConfig(rank=new_rank))
    39                                         
    40   1738.8 MiB      0.0 MiB           1               args_ = (self.callee, port, return_value_queue, new_config, *args)
    41   1738.8 MiB      0.0 MiB           1               all_procs.append(mp.Process(target=setup_new_process, args=args_))
    42                                         
    43                                                 # Clear GPU space (e.g., after a `Searcher` on GPU-0 is deleted)
    44                                                 # TODO: Generalize this from GPU-0 only!
    45                                                 # TODO: Move this to a function. And call that function from __del__ in a class that's inherited by Searcher, Indexer, etc.
    46                                         
    47                                                 # t = torch.cuda.get_device_properties(0).total_memory
    48                                                 # r = torch.cuda.memory_reserved(0)
    49                                                 # a = torch.cuda.memory_allocated(0)
    50                                                 # f = r-a
    51                                         
    52                                                 # print_message(f"[Pre-Emptying] GPU memory check: r={r}, a={a}, f={f}")
    53                                         
    54   1738.8 MiB      0.0 MiB           1           torch.cuda.empty_cache()
    55                                         
    56                                                 # t = torch.cuda.get_device_properties(0).total_memory
    57                                                 # r = torch.cuda.memory_reserved(0)
    58                                                 # a = torch.cuda.memory_allocated(0)
    59                                                 # f = r-a
    60                                         
    61                                                 # print_message(f"[Post-Emptying] GPU memory check: r={r}, a={a}, f={f}")
    62                                         
    63   1738.8 MiB      0.0 MiB           1           print_memory_stats('MAIN')
    64                                         
    65   1834.7 MiB      0.0 MiB           2           for proc in all_procs:
    66   1738.8 MiB      0.0 MiB           1               print("#> Starting...")
    67   1834.7 MiB     95.9 MiB           1               proc.start()
    68                                         
    69   1834.7 MiB      0.0 MiB           1           print_memory_stats('MAIN')
    70                                         
    71                                                 # TODO: If the processes crash upon join, raise an exception and don't block on .get() below!
    72                                         
    73   1834.7 MiB      0.0 MiB           4           return_values = sorted([return_value_queue.get() for _ in all_procs])
    74   1834.7 MiB      0.0 MiB           4           return_values = [val for rank, val in return_values]
    75                                         
    76   1834.7 MiB      0.0 MiB           1           if not self.return_all:
    77   1834.7 MiB      0.0 MiB           1               return_values = return_values[0]
    78                                                 
    79   1834.7 MiB      0.0 MiB           2           for proc in all_procs:
    80   1834.7 MiB      0.0 MiB           1               proc.join()
    81   1834.7 MiB      0.0 MiB           1               print("#> Joined...")
    82                                         
    83   1834.7 MiB      0.0 MiB           1           print_memory_stats('MAIN')
    84                                                 
    85   1834.7 MiB      0.0 MiB           1           return return_values


Filename: /home/ColBERT/colbert/indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    85   1738.8 MiB   1738.8 MiB           1       @profile
    86                                             def __launch(self, collection):
    87   1738.8 MiB      0.0 MiB           1           launcher = Launcher(encode)
    88   1738.8 MiB      0.0 MiB           1           if self.config.nranks == 1 and self.config.avoid_fork_if_possible:
    89                                                     shared_queues = []
    90                                                     shared_lists = []
    91                                                     launcher.launch_without_fork(self.config, collection, shared_lists, shared_queues, self.verbose)
    92                                         
    93                                                     return
    94                                         
    95   1738.8 MiB      0.0 MiB           1           manager = mp.Manager()
    96   1738.8 MiB      0.0 MiB           4           shared_lists = [manager.list() for _ in range(self.config.nranks)]
    97   1738.8 MiB      0.0 MiB           4           shared_queues = [manager.Queue(maxsize=1) for _ in range(self.config.nranks)]
    98                                         
    99                                                 # Encodes collection into index using the CollectionIndexer class
   100   1834.7 MiB     95.9 MiB           1           launcher.launch(self.config, collection, shared_lists, shared_queues, self.verbose)


Filename: /home/ColBERT/colbert/indexer.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    60   1738.8 MiB   1738.8 MiB           1       @profile
    61                                             def index(self, name, collection, overwrite=False):
    62   1738.8 MiB      0.0 MiB           1           assert overwrite in [True, False, 'reuse', 'resume', "force_silent_overwrite"]
    63                                         
    64   1738.8 MiB      0.0 MiB           1           self.configure(collection=collection, index_name=name, resume=overwrite=='resume')
    65                                                 # Note: The bsize value set here is ignored internally. Users are encouraged
    66                                                 # to supply their own batch size for indexing by using the index_bsize parameter in the ColBERTConfig.
    67   1738.8 MiB      0.0 MiB           1           self.configure(bsize=64, partitions=None)
    68                                         
    69   1738.8 MiB      0.0 MiB           1           self.index_path = self.config.index_path_
    70   1738.8 MiB      0.0 MiB           1           index_does_not_exist = (not os.path.exists(self.config.index_path_))
    71                                         
    72   1738.8 MiB      0.0 MiB           1           assert (overwrite in [True, 'reuse', 'resume', "force_silent_overwrite"]) or index_does_not_exist, self.config.index_path_
    73   1738.8 MiB      0.0 MiB           1           create_directory(self.config.index_path_)
    74                                         
    75   1738.8 MiB      0.0 MiB           1           if overwrite == 'force_silent_overwrite':
    76                                                     self.erase(force_silent=True)
    77   1738.8 MiB      0.0 MiB           1           elif overwrite is True:
    78   1738.8 MiB      0.0 MiB           1               self.erase()
    79                                         
    80   1738.8 MiB      0.0 MiB           1           if index_does_not_exist or overwrite != 'reuse':
    81   1834.7 MiB     95.9 MiB           1               self.__launch(collection)
    82                                         
    83   1834.7 MiB      0.0 MiB           1           return self.index_path


